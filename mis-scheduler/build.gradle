apply plugin: 'java'
apply plugin: 'eclipse'

group = 'org.devoware'
version = 1.0
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url 'https://github.com/cpdevoto/maven-repository/raw/master/' }
}

dependencies {
    runtime     'org.devoware:bootstrap:1.0'

    compile     'org.slf4j:log4j-over-slf4j:1.7.21',
                'org.slf4j:jcl-over-slf4j:1.7.21',
                'ch.qos.logback:logback-core:1.1.7',
                'ch.qos.logback:logback-classic:1.1.7',
                'com.google.guava:guava:19.0',
                'com.fasterxml.jackson.core:jackson-core:2.8.1',
                'com.fasterxml.jackson.core:jackson-databind:2.8.1',
                'com.fasterxml.jackson.core:jackson-annotations:2.8.1',
                'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.8.1',
                'org.apache.commons:commons-lang3:3.4',
                'javax.validation:validation-api:1.1.0.Final',
                'org.hibernate:hibernate-validator:5.2.4.Final',
                'org.glassfish:javax.el:3.0.0',
                'com.google.dagger:dagger:2.2',
                'org.devoware:homonculus:1.0',
                'org.devoware:yaml-configuration:1.0',
                'org.devoware:validators:1.0',
                'org.devoware:database-config:1.0',
                'org.apache.tomcat:tomcat-jdbc:8.5.4',
                'postgresql:postgresql:9.1-901-1.jdbc4',
                'io.dropwizard.metrics:metrics-core:3.1.0',
                'io.dropwizard.metrics:metrics-healthchecks:3.1.0',
                'io.dropwizard.metrics:metrics-jvm:3.1.0'
                
    
    compileOnly 'com.google.code.findbugs:annotations:3.0.1',
                'com.google.dagger:dagger-compiler:2.2'            
                
             
    testCompile 'junit:junit:4.12', 
                'org.mockito:mockito-core:1.10.19',
                'org.hamcrest:hamcrest-all:1.3'     
}

task deleteLibraries(type: Delete) {
   delete file('lib').listFiles()
}

task copyLibraries(type: Copy) {
   from configurations.compile, configurations.runtime
   into 'lib'
}

tasks.clean.dependsOn(deleteLibraries)
tasks.cleanEclipse.dependsOn(deleteLibraries)
tasks.build.dependsOn(copyLibraries) 
tasks.eclipse.dependsOn(copyLibraries) 

eclipse.project {
   buildCommand 'edu.umd.cs.findbugs.plugin.eclipse.findbugsBuilder'
   natures 'edu.umd.cs.findbugs.plugin.eclipse.findbugsNature'
}

tasks.cleanEclipseJdt {
   doFirst {
       delete file('.factorypath'),
              file('bin/MIS Scheduler - Start.launch'),
	          file('bin/MIS Scheduler - Stop.launch')
   }
}


eclipse {
  jdt.file.withProperties { 
    it['org.eclipse.jdt.core.compiler.processAnnotations'] = 'enabled'
  }
  classpath {
    defaultOutputDir = file('classes')
  }
}

tasks.eclipseJdt {
   doFirst {
       def aptPrefs = 
           file('.settings/org.eclipse.jdt.apt.core.prefs')
       aptPrefs.parentFile.mkdirs()

	   aptPrefs.text = """\
	   eclipse.preferences.version=1
	   org.eclipse.jdt.apt.aptEnabled=true
	   org.eclipse.jdt.apt.genSrcDir=.apt_generated
	   org.eclipse.jdt.apt.reconcileEnabled=true
	   """.stripIndent()
	   
	   def launchConfig1 = 
	       file('bin/MIS Scheduler - Start.launch')
	       
	   launchConfig1.text = """\
		<?xml version="1.0" encoding="UTF-8" standalone="no"?>
		<launchConfiguration type="org.eclipse.jdt.launching.localJavaApplication">
		<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
		<listEntry value="/mis-scheduler"/>
		</listAttribute>
		<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
		<listEntry value="4"/>
		</listAttribute>
		<booleanAttribute key="org.eclipse.jdt.launching.ATTR_USE_START_ON_FIRST_THREAD" value="true"/>
		<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
		<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8/&quot; javaProject=&quot;mis-scheduler&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
		<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/mis-scheduler/lib/bootstrap-1.0.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;"/>
		</listAttribute>
		<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
		<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.devoware.bootstrap.Bootstrap"/>
		<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="start mis-scheduler.yml"/>
		<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="mis-scheduler"/>
		<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dbootstrap.class=com.doradosystems.mis.scheduler.MisSchedulerApplication"/>
		<stringAttribute key="org.eclipse.jdt.launching.WORKING_DIRECTORY" value="\${workspace_loc:mis-scheduler/bin}"/>
		</launchConfiguration>
	   """.stripIndent()    
   
	   def launchConfig2 = 
	       file('bin/MIS Scheduler - Stop.launch')
	       
	   launchConfig2.text = """\
		<?xml version="1.0" encoding="UTF-8" standalone="no"?>
		<launchConfiguration type="org.eclipse.jdt.launching.localJavaApplication">
		<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
		<listEntry value="/mis-scheduler"/>
		</listAttribute>
		<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
		<listEntry value="4"/>
		</listAttribute>
		<booleanAttribute key="org.eclipse.jdt.launching.ATTR_USE_START_ON_FIRST_THREAD" value="true"/>
		<listAttribute key="org.eclipse.jdt.launching.CLASSPATH">
		<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry containerPath=&quot;org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8/&quot; javaProject=&quot;mis-scheduler&quot; path=&quot;1&quot; type=&quot;4&quot;/&gt;&#10;"/>
		<listEntry value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;runtimeClasspathEntry internalArchive=&quot;/mis-scheduler/lib/bootstrap-1.0.jar&quot; path=&quot;3&quot; type=&quot;2&quot;/&gt;&#10;"/>
		</listAttribute>
		<booleanAttribute key="org.eclipse.jdt.launching.DEFAULT_CLASSPATH" value="false"/>
		<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.devoware.bootstrap.Bootstrap"/>
		<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="stop"/>
		<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="mis-scheduler"/>
		<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dbootstrap.class=com.doradosystems.mis.scheduler.MisSchedulerApplication"/>
		<stringAttribute key="org.eclipse.jdt.launching.WORKING_DIRECTORY" value="\${workspace_loc:mis-scheduler/bin}"/>
		</launchConfiguration>
	   """.stripIndent()    

	   file('.factorypath').withWriter {
	       new groovy.xml.MarkupBuilder(it).'factorypath' {
	           FileCollection libs = (configurations.compile + configurations.compileOnly).filter {lib ->
				   lib.name.startsWith('dagger') ||
				   lib.name.startsWith('guava') ||
				   lib.name.startsWith('javax.inject')
	           }
	           libs.each {lib ->
	               factorypathentry(
	                   kind: 'EXTJAR',
	                   id: lib.absolutePath,
	                   enabled: true,
	                   runInBatchMode: false
	               )
	           }
	       }
	   }
   }
}
